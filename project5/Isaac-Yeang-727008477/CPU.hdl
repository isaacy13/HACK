// ISAAC YEANG : 727008477

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Aregin);
    
    Not(in=instruction[15], out=NotI15);
    And(a=instruction[15], b=instruction[5], out=CinstAdest);
    Or(a=NotI15, b=CinstAdest, out=loadAreg); // A inst or (C inst and dest == A)

    ARegister(in=Aregin, load=loadAreg, out=Aregout);

    // Y-input
    And(a=instruction[15], b=instruction[12], out=AMMUX);
    Mux16(a=Aregout, b=inM, sel=AMMUX, out=Yinput);

    // X-input
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Xinput);

    // ALU
    ALU(x=Xinput, y=Yinput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=outIsZero, ng=outNegative);   

    // null: i[15] i[2]' i[1]' i[0]' // NO JMP
    // JMP: i[15] i[2] i[1] i[0] // ALWAYS JMP
    // JEQ: i[15] i[2]' i[1] i[0]' // = 0
    // JNE: i[15] i[2] i[1]' i[0] // != 0
    // JGE: i[15] i[2]' i[1] i[0] // >= 0
    // JLE: i[15] i[2] i[1] i[0]' // <= 0
    // JGT: i[15] i[2]' i[1]' i[0] // > 0
    // JLT: i[15] i[2] i[1]' i[0]' // < 0
    
    // if (i[2] i[1] i[0]) // JMP
    //    load = 1
    // else if (outIsZero && (i[2]' i[1] i[0]' || i[2]' i[1] i[0] || i[2] i[1] i[0]')) { load = 1 } // JEQ / JGE / JLE
    // else {
    //    if (!outIsZero && i[2] i[1]' i[0]) // JNE
    //       load = 1
    //    else if (!outIsZero && !outNegative && (i[2]' i[1] i[0] || i[2]' i[1]' i[0])) // JGE / JGT
    //       load = 1
    //    else if (!outIsZero && outNegative && (i[2] i[1] i[0]' || i[2] i[1]' i[0]')) // JLE / JLT
    //       load = 1
    // }

    // logic for loadPC
    Not(in=instruction[2], out=NotI2);
    Not(in=instruction[1], out=NotI1);
    Not(in=instruction[0], out=NotI0);
    Not(in=outIsZero, out=NOToutIsZero);
    Not(in=outNegative, out=NOToutNegative);
    
    And(a=instruction[2], b=instruction[1], out=A1);
    And(a=A1, b=instruction[0], out=JMP);
    And(a=A1, b=NotI0, out=JLE);

    And(a=instruction[2], b=NotI1, out=A2);
    And(a=A2, b=instruction[0], out=JNE);
    And(a=A2, b=NotI0, out=JLT);

    And(a=NotI2, b=instruction[1], out=A3);
    And(a=A3, b=instruction[0], out=JGE);
    And(a=A3, b=NotI0, out=JEQ);

    And(a=NotI2, b=NotI1, out=A4);
    And(a=A4, b=instruction[0], out=JGT);

    Or(a=JEQ, b=JGE, out=B1);
    Or(a=B1, b=JLE, out=B2);
    And(a=B2, b=outIsZero, out=F1);

    And(a=NOToutIsZero, b=JNE, out=F2);
    Or(a=JGE, b=JGT, out=B3);
    And(a=NOToutNegative, b=B3, out=B4);
    And(a=B4, b=NOToutIsZero, out=F3);

    Or(a=JLE, b=JLT, out=B5);
    And(a=outNegative, b=B5, out=B6);
    And(a=NOToutIsZero, b=B6, out=F4);

    Or(a=F1, b=F2, out=L1);
    Or(a=F3, b=F4, out=L2);
    Or(a=JMP, b=L1, out=L3);
    Or(a=L2, b=L3, out=loadPClogic);

    // if C instruct, then loadPC, otherwise, don't load
    Mux(a=false, b=loadPClogic, sel=instruction[15], out=loadPC);

    // PC
    PC(in=Aregout, load=loadPC, inc=true, reset=reset, out=pcout);
    Bus16toBus15(in=pcout, out=pc);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

    // addressM 0xxxxxxxxxxxxxxx
    Bus16toBus15(in=Aregout, out=addressM);
}