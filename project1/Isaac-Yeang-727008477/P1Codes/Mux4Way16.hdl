// ISAAC YEANG : 727008477

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    /*
    instead of re-inventing the wheel, we can
    pass each of the corresponding bits through 
    the 2-1 MUX we made earlier. 
    .
    since it only takes
    two inputs and a 1-bit selector, we first compare
    using sel[0] between two letters that have a
    different sel[0] bit (ie: a & b are 0 and 1 respectively)
    but same sel[1] bit (ie: a & b are 0)
    .
    we then do the same with the remaining letters that have
    different sel[0] (ie: c & d are 0 and 1 respectively) but
    same sel[1] bit (ie: c & d are 1)
    .
    after this, we pass the results from the previous step
    into MUX once more, comparing using sel[1] (since we 
    previously separated them by sel[1]) and pass the result
    into the corresponding output
    */
    Mux(a=a[0], b=b[0], sel=sel[0], out=w1);
    Mux(a=c[0], b=d[0], sel=sel[0], out=w2);
    Mux(a=w1, b=w2, sel=sel[1], out=out[0]);

    Mux(a=a[1], b=b[1], sel=sel[0], out=w3);
    Mux(a=c[1], b=d[1], sel=sel[0], out=w4);
    Mux(a=w3, b=w4, sel=sel[1], out=out[1]);

    Mux(a=a[2], b=b[2], sel=sel[0], out=w5);
    Mux(a=c[2], b=d[2], sel=sel[0], out=w6);
    Mux(a=w5, b=w6, sel=sel[1], out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0], out=w7);
    Mux(a=c[3], b=d[3], sel=sel[0], out=w8);
    Mux(a=w7, b=w8, sel=sel[1], out=out[3]);

    // restart naming: x

    Mux(a=a[4], b=b[4], sel=sel[0], out=x1);
    Mux(a=c[4], b=d[4], sel=sel[0], out=x2);
    Mux(a=x1, b=x2, sel=sel[1], out=out[4]);

    Mux(a=a[5], b=b[5], sel=sel[0], out=x3);
    Mux(a=c[5], b=d[5], sel=sel[0], out=x4);
    Mux(a=x3, b=x4, sel=sel[1], out=out[5]);

    Mux(a=a[6], b=b[6], sel=sel[0], out=x5);
    Mux(a=c[6], b=d[6], sel=sel[0], out=x6);
    Mux(a=x5, b=x6, sel=sel[1], out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0], out=x7);
    Mux(a=c[7], b=d[7], sel=sel[0], out=x8);
    Mux(a=x7, b=x8, sel=sel[1], out=out[7]);

    // restart naming: y

    Mux(a=a[8], b=b[8], sel=sel[0], out=y1);
    Mux(a=c[8], b=d[8], sel=sel[0], out=y2);
    Mux(a=y1, b=y2, sel=sel[1], out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0], out=y3);
    Mux(a=c[9], b=d[9], sel=sel[0], out=y4);
    Mux(a=y3, b=y4, sel=sel[1], out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0], out=y5);
    Mux(a=c[10], b=d[10], sel=sel[0], out=y6);
    Mux(a=y5, b=y6, sel=sel[1], out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0], out=y7);
    Mux(a=c[11], b=d[11], sel=sel[0], out=y8);
    Mux(a=y7, b=y8, sel=sel[1], out=out[11]);

    // restart naming: z

    Mux(a=a[12], b=b[12], sel=sel[0], out=z1);
    Mux(a=c[12], b=d[12], sel=sel[0], out=z2);
    Mux(a=z1, b=z2, sel=sel[1], out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0], out=z3);
    Mux(a=c[13], b=d[13], sel=sel[0], out=z4);
    Mux(a=z3, b=z4, sel=sel[1], out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0], out=z5);
    Mux(a=c[14], b=d[14], sel=sel[0], out=z6);
    Mux(a=z5, b=z6, sel=sel[1], out=out[14]);

    //as' + bs
    Mux(a=a[15], b=b[15], sel=sel[0], out=z7);
    Mux(a=c[15], b=d[15], sel=sel[0], out=z8);
    Mux(a=z7, b=z8, sel=sel[1], out=out[15]);
}